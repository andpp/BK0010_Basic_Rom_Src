;*******************************************************
;*                                                     *
;*      ПАКЕТ ГРАФИЧЕСКИХ ПРОГРАММ БЕЙСИК-ВИЛЬНЮС      *
;*   РАЗРАБОТАН СОТРУДНИКАМИ ИПИ АН СССР И ВЦКП ВГУ    *
;*                                                     *
;*******************************************************
.GLOBL	STAND,SAND,IDIV,DAUG
;
COLERR:	TRAP	5
.IF	EQ,0
;
COLF::	MOV	@#214,R3
	MOV	(SP)+,R0
	BNE	1$
	CMP	(R0)+,(R0)+
1$:	CALL	TSTCOL
	EMT	16
	MOV	#235,R0
	EMT	16
;
COLRET::MOV	R3,@#214
	JMP	@(R4)+
;
TSTCOL:	CMP	R0,#4
	BHI	COLERR
	ADD	#220,R0
	RETURN
;
COLR::	MOV	@#214,R3
	MOV	(SP)+,R0
	BEQ	1$
	CALL	TSTCOL
	EMT	16
	JMP	@(R4)+
1$:	MOV	@#212,@#214
	JMP	@(R4)+
;
.IFF
COLF::	MOV	@#214,R3
	MOV	(SP)+,R0
	EMT	16
	MOV	#235,R0
	EMT	16
COLRET::MOV	R3,@#214
	JMP	@(R4)+
COLR::	MOV	@#214,R3
	MOV	(SP)+,R0
	EMT	16
	JMP	@(R4)+
.IFT
;
CURCOR::MOV	@#176,-(SP)
	MOV	@#200,-(SP)
	JMP	@(R4)+
;
STP::	ADD	@#176,2(SP)
	ADD	@#200,@SP
	JMP	@(R4)+
;
LSTP::	ADD	6(SP),2(SP)
	ADD	4(SP),@SP
	JMP	@(R4)+
;
SPFORM::MOV	@SP,R0
	BEQ	1$
;
;	CALL	TSTCOL
;
	CMP	R0,#4
	BHI	COLERR
	ADD	#220,R0
;
	MOV	R0,@SP
	JMP	@(R4)+
1$:	MOV	@#212,@SP
SPTOL:	BIC	#177774,@SP
	SUB	#224,@SP
	NEG	@SP
	JMP	@(R4)+
;
RSP::	MOV	@#214,-(SP)
	BR	SPTOL
;
VIDSP::	MOV	@SP,-(SP)
	JMP	@(R4)+
;
; .PAGE
.SBTTL	SET/RESET	SPECIFIED COLOR POINT SETTING/ERASING

;------------------------------------------------------------------------------
; ПРОЦЕДУРА УСТАНОВКИ ЦВЕТА И ГАШЕНИЯ ТОЧКИ.
; СТЕК НА ВХОДЕ:
; 2(SP)		X-КООРДИНАТА;
;  (SP)		Y;
;------------------------------------------------------------------------------

SET::	MOV	PC,R0
PNT:	MOV	(SP)+,R2
	MOV	(SP)+,R1
	EMT	30
	JMP	@(R4)+
;
RESET::	CLR	R0
	BR	PNT
;
; .PAGE
.SBTTL	LSET	LINE'S SEGMENT DRAWING

;------------------------------------------------------------------------------
; ПРОЦЕДУРА ВЫЧЕРЧИВАНИЯ ОТРЕЗКА ПРЯМОЙ МЕЖДУ ДВУМЯ ТОЧКАМИ (X1,Y1)-(X2,Y2).
; СТЕК НА ВХОДЕ:
;  6(SP)	X1;
;  4(SP)	Y1;
;  2(SP)	X2;
;   (SP)	Y2;
;------------------------------------------------------------------------------

LSET::	MOV	PC,R0
	MOV	6(SP),R1
	MOV	4(SP),R2
	EMT	30
	MOV	(SP)+,R2
	MOV	(SP)+,R1
	CMP	(SP)+,(SP)+
	EMT	32
	JMP	@(R4)+
;
; .PAGE
.SBTTL	RECSET	RECTANGLE DRAWING

;------------------------------------------------------------------------------
; ПРОЦЕДУРА ОТРИСОВКИ ПРЯМОУГОЛЬНИКА СО СТОРОНАМИ ПАРАЛЛЕЛЬНЫМИ СТОРОНАМ
; ЭКРАНА И ДИАГОНАЛЬЮ НА ТОЧКАХ (X1,Y1), (X2,Y2)
; СТЕК НА ВХОДЕ:
;  6(SP)	X1;
;  4(SP)	Y1;
;  2(SP)	X2;
;   (SP)	Y2;
;------------------------------------------------------------------------------

RECSET::MOV	PC,R0
	MOV	@SP,R2
	MOV	2(SP),R1
	EMT	30
	MOV	6(SP),R1
	EMT	32
	MOV	4(SP),R2
	EMT	32
	MOV	2(SP),R1
	EMT	32
	MOV	(SP)+,R2
	EMT	32
	TST	(SP)+
	CMP	(SP)+,(SP)+
	JMP	@(R4)+
;

; .PAGE
.SBTTL	BOXSET FILLING RECTANGLE DRAWING

;------------------------------------------------------------------------------
; ПРОЦЕДУРА ВЫЧЕРЧИВАНИЯ ЗАКРАШЕННОГО ПРЯМОУГОЛЬНИКА СО СТОРОНАМИ ПАРАЛЛЕЛЬНЫМИ
; СТОРОНАМ ЭКРАНА И ДИАГОНАЛЬЮ НА ТОЧКАХ (X1,Y1), (X2,Y2).
; СТЕК НА ВХОДЕ:
;  6(SP)	X1;
;  4(SP)	Y1;
;  2(SP)	X2;
;   (SP)	Y2;
;------------------------------------------------------------------------------

BOXSET::MOV	@SP,R2
	MOV	4(SP),R1
	MOV	R1,R0
	CMP	R1,R2
	BHIS	1$
	MOV	R2,R0
	MOV	R1,R2
1$:	SUB	R2,R0
	INC	R0
2$:	MOV	2(SP),R1
	EMT	30
	MOV	6(SP),R1
	EMT	32
	INC	R2
	SOB	R0,2$
	MOV	(SP)+,R2
	MOV	(SP)+,R1
	INC	R0
	EMT	30
	CMP	(SP)+,(SP)+
	JMP	@(R4)+

; .PAGE
.SBTTL	POINT	GETTING OF POINT COLOR

;------------------------------------------------------------------------------
; ПРОЦЕДУРА ПОЛУЧЕНИЯ ЦВЕТА ТОЧКИ, ЗАДАННОЙ КООРДИНАТЫ.
; СТЕК НА ВХОДЕ:
; 2(SP)		X-КООРДИНАТА;
;  (SP)		Y;
; СТЕК НА ВЫХОДЕ:
;  (SP)		КОД ЦВЕТА ТОЧКИ.
;------------------------------------------------------------------------------

POINT::
	MOV	(SP)+,R2	; Y
	MOV	(SP)+,R1	; X
	MOV	#-1,R0
	CMP	R1,#377
	BHI	1$
	CMP	R2,#239.
	BHI	1$
	CALL	$COLOR
	SUB	#220,R0
1$:	MOV	R0,-(SP)	; ВОЗВРАЩАЕМЫЙ ЦВЕТ ТОЧКИ
	JMP	@(R4)+
;
;******************************************************************************
; ИПИАН	СССР,	ОТДЕЛ 01,	СЕКТОР	130
; ГРАФИЧЕСКИЕ МОДУЛИ ЯЗЫКА BASIC.
;******************************************************************************

.SBTTL	$BSCGRP	BASIC GRAPHIC

.MACRO	PUSH	ARGS
.IRP	ARG,<ARGS>
	MOV	ARG,-(SP)
.ENDR
.ENDM

.MACRO	POP	ARGS
.IRP	ARG,<ARGS>
	MOV	(SP)+,ARG
.ENDR
.ENDM

; .PAGE
.SBTTL	$PAINT	REGION FILLING

;------------------------------------------------------------------------------
; ПРОЦЕДУРА ЗАКРАСКИ УКАЗАННЫМ ЦВЕТОМ ОБЛАСТИ С ГРАНИЦЕЙ ОПРЕДЕЛЕННОГО ЦВЕТА.
; СТЕК НА ВХОДЕ:
;  6(SP)	X-КООРДИНАТА ТОЧКИ;
;  4(SP)	Y;
;  2(SP)	КОД ЦВЕТА ОКРАСКИ;
;   (SP)	КОД ЦВЕТА ГРАНИЦЫ;
; РЕГИСТРЫ R4,R5 СОХРАНЯЮТСЯ.
;------------------------------------------------------------------------------

$PAINT::
	PUSH	<@#214,R4,R5>
	MOV	R4,SAVJMP
	MOV	14(SP),R1	; X-КООРДИНАТА
	MOV	12(SP),R2	; Y
	MOV	10(SP),R0	; ЦВЕТ ОКРАСКИ
	EMT	16		; ПЕРЕДАЕМ ДРАЙВЕРУ
	MOV	R0,R4
	MOV	6(SP),R5	; ЦВЕТ ГРАНИЦЫ
	CALL	$BORDR		; ТОЧКА (X,Y) ПРИНАДЛЕЖИТ ГРАНИЦЕ ?
	BCS	$END		; ДА 
				; ПРОИЗВОДИМ НАЧАЛЬНОЕ СКАНИРОВАНИЕ ВПРАВО И
				; ВЛЕВО  ОТ ТОЧКИ С ЦЕЛЬЮ ОПРЕДЕЛЕНИЯ ГРАНИЦ
	MOV	R1,R3		; СОХРАНЯЕМ X-КООРДИНАТУ
10$:
	INC	R1
	CALL	$BORDR
	BCC	10$
	MOV	R1,R0		; ОТНЫНЕ ЭТО ПРАВАЯ ГРАНИЦА
	MOV	R3,R1		; ВОССТАНОВИЛИ X-КООРДИНАТУ
20$:
	DEC	R1
	CALL	$BORDR
	BCC	20$
				; ОТНЫНЕ В R1 ЛЕВАЯ ГРАНИЦА
	CLR	R3		; НУЛЕВОЙ ШАГ ПО Y - ПРИЗНАК ОКОНЧАНИЯ
				; ЗАПОЛНЕНИЯ КОНТУРА
	PUSH	<R3>
	DEC	R3
	PUSH	<R0,R1,R2,R3>	; ПАРАМЕТРЫ ЗАКРАСКИ КОНТУРА СНИЗУ ОТ ТОЧКИ
	NEG	R3		; А ПОКА БУДЕМ ЗАКРАШИВАТЬ ВВЕРХ
	CALL	$LINHR		; НО ВНАЧАЛЕ ПРОВЕДЕМ ПРЯМУЮ ЧЕРЕЗ ТОЧКУ
$SCANN:				; ОСНОВНОЙ ЦИКЛ ПО ЗАКРАСКЕ ОБЛАСТИ
	ADD	R3,R2		; НОВОЕ ЗНАЧЕНИЕ Y
	INC	R1		; НОВАЯ ЛЕВАЯ ГРАНИЦА
	CALL	$BORDR		; УХОДИТ ВПРАВО ?
	BCS	30$		; ДА
	PUSH	<R1,R1>		; X
10$:
	DEC	R1
	CALL	$BORDR
	BCC	10$		; НОВАЯ ЛЕВАЯ ГРАНИЦА УХОДИТ ВЛЕВО
	SUB	R1,(SP)		; СТАРАЯ ЛЕВАЯ ГРАНИЦА БОЛЬШЕ НОВОЙ 
	CMP	#2,(SP)+	; НА 2 ?
	BGE	20$		; НЕТ
	SUB	#6,SP		; РЕЗЕРВИРУЕМ В СТЕКЕ СЛОТ В 4 СЛОВА
	PUSH	<6(SP)>		; ПЕРЕПИСЫВАЕМ X В 5-ОЕ СЛОВО
	ADD	#10,SP		; УКАЗАТЕЛЬ НА НАЧАЛО СЛОТА
	DEC	(SP)		; ЗАПИСЫВАЕМ ПАРАМЕТРЫ ПРОХОДА ОТ НОВОЙ
	PUSH	<R1,R2,R3>	; ЛЕВОЙ ГРАНИЦЫ ДО СТАРОЙ СО СМЕНОЙ
	NEG	(SP)		; НАПРАВЛЕНИЯ ПО ОСИ Y В СТЕК
	TST	-(SP)		; УКАЗАТЕЛЬ НА X
20$:
	PUSH	<(SP)>
	MOV	R1,2(SP)	; НОВАЯ ЛЕВАЯ ГРАНИЦА
	POP	<R1>		; X
	BR	40$
30$:				; ИССЛЕДУЕМ ЛЕВУЮ ГРАНИЦУ, УШЕДШУЮ ВПРАВО
	INC	R1
	CMP	R1,R0		; КОНТУР ЗАМКНУЛСЯ ?
	BGE	$ENDSC		; ДА
	CALL	$BORDR		; ЛЕВАЯ БЕЖИТ ДАЛЬШЕ ВПРАВО ?
	BCS	30$
	PUSH	<R1>
	DEC	(SP)		; НОВАЯ ЛЕВАЯ ГРАНИЦА
40$:
	INC	R1		; ПОШЛИ К ПРАВОЙ ГРАНИЦЕ
	CALL	$BORDR		; ДОСТИГНУТА ?
	BCC	40$		; НЕТ
	INC	R0		; СТАРАЯ ПРАВАЯ ГРАНИЦА + 1
	CMP	R1,R0		; НОВАЯ ПРАВАЯ ГРАНИЦА ПРЕВЫШАЕТ
				; СТАРУЮ БОЛЬШЕ ЧЕМ НА 1 ?
	BLE	50$		; НЕТ
        SUB	#6,SP		; РЕЗЕРВИРУЕМ В СТЕКЕ СЛОТ ДЛИНОЙ
				; В 4 СЛОВА
	PUSH	<6(SP)>		; ПЕРЕПИСЫВАЕМ ЛЕВУЮ ГРАНИЦУ
	ADD	#12,SP		; ВЫХОДИМ НА НАЧАЛО СЛОТА 
	DEC	R0		; ЛЕВАЯ ГРАНИЦА ДЛЯ ПОСЛЕДУЮЩЕГО АНАЛИЗА
	PUSH	<R1,R0,R2,R3>
	NEG	(SP)		; МЕНЯЕМ ЗНАК ШАГА
	BR	60$
50$:
	DEC	R0		; СТАРАЯ ПРАВАЯ ГРАНИЦА
	DEC	R0		; СТАРАЯ ПРАВАЯ ГРАНИЦА - 1
	CMP	R0,R1		; СТАРАЯ ПРАВАЯ ГРАНИЦА ПРЕВЫШАЕТ
				; НОВУЮ БОЛЬШЕ ЧЕМ НА 1
	BLE	70$		; НЕТ
	SUB	#6,SP
	PUSH	<6(SP)>
	ADD	#12,SP
	INC	R0		; ПРАВАЯ ГРАНИЦА ОСТАЛАСЬ ПРЕЖНЕЙ,
				; А НОВАЯ ПРАВАЯ ОБ'ЯВЛЯЕТСЯ ЛЕВОЙ
				; И АНАЛИЗИРУЕТСЯ В ДАЛЬНЕЙШЕМ
	PUSH	<R0,R1,R2,R3>
	SUB	(SP),2(SP)	; ОСТАТОК СТРОКИ ДОЛЖЕН БЫТЬ ПРОАНАЛИЗИ-
				; РОВАН ПРИ ТЕКУЩЕМ ЗНАЧЕНИИ Y, А
				; В НАЧАЛЕ ЦИКЛА БУДЕТ "ДОБАВЛЕН" ШАГ
60$:
	TST	-(SP)		; ВОССТАНАВЛИВАЕМ УКАЗАТЕЛЬ НА
				; НОВУЮ ЛЕВУЮ ГРАНИЦУ
70$:
	MOV	R1,R0		; ПЕРЕПИСЫВАЕМ НОВУЮ ПРАВУЮ ГРАНИЦУ
				; НА ЕЕ МЕСТО
	POP	<R1>		; ВОССТАНАВЛИВАЕМ ИЗ СТЕКА
				; НОВУЮ ЛЕВУЮ
	CALL	$LINHR
	BR	$SCANN
$ENDSC:				; КОНЕЦ СКАНИРОВАНИЯ ЗАМКНУТОЙ ПОДОБЛАСТИ
	POP	<R3>		; ИМЕЮТСЯ ДРУГИЕ ПОДОБЛАСТИ
	BEQ	$END		; НЕТ
	POP	<R2,R1,R0>
	BR	$SCANN
$END:				; ЗАВЕРШЕНИЕ ПРОГРАММЫ
	POP	<R5,R4,R3>
	CMP	(SP)+,(SP)+	; ОЧИЩАЕМ СТЕК ОТ УЖЕ
	POP	<R2,R1>		; НЕНУЖНЫХ ПАРАМЕТРОВ
	MOV	PC,R0
	EMT	30
	CLR	SAVJMP
	JMP	COLRET
;
; .PAGE
.SBTTL	$LINHR

;------------------------------------------------------------------------------
; ВНУТРЕННЯЯ ПРОЦЕДУРА ПРОВОДИТ ГОРИЗОНТАЛЬНУЮ ПРЯМУЮ МЕЖДУ ГРАНИЦАМИ.
; РЕГИСТРЫ НА ВХОДЕ:
; R0	ПРАВАЯ ГРАНИЦА;
; R1	ЛЕВАЯ ГРАНИЦА;
; R2	Y.
; ВСЕ РЕГИСТРЫ СОХРАНЯЮТСЯ.
;------------------------------------------------------------------------------

$LINHR:
	PUSH	<R0,R1>
	INC	R1
	CLR	R0
	INC	R0
	EMT	30
	MOV	2(SP),R1
	DEC	R1
	EMT	32
	POP	<R1,R0>
	RETURN

; .PAGE
.SBTTL	$BORDR

;------------------------------------------------------------------------------
; ВНУТРЕННЯЯ ПРОЦЕДУРА ОПРЕДЕЛЯЕТ ПОЛОЖЕНИЕ ТОЧКИ ОТНОСИТЕЛЬНО ГРАНИЦЫ.
; РЕГИСТРЫ НА ВХОДЕ:
; R1	X-КООРДИНАТА ТОЧКИ;
; R2	Y;
; R4	ЦВЕТ ОКРАСКИ;
; R5	ЦВЕТ ГРАНИЦЫ.
; ВСЕ РЕГИСТРЫ СОХРАНЯЮТСЯ.
; КОДЫ УСЛОВИЙ:
; БИТ C УСТАНАВЛИВАЕТСЯ, ЕСЛИ ТОЧКА ПРИНАДЛЕЖИТ ГРАНИЦЕ. В ПРОТИВНОМ СЛУЧАЕ
; ОЧИЩАЕТСЯ.
;------------------------------------------------------------------------------

$BORDR:
	BIT	R1,#177400	; X-КООРДИНАТА В ДОПУСТИМЫХ ПРЕДЕЛАХ
	BNE	20$		; НЕТ
	BIT	R2,#177400	; Y-КООРДИНАТА В ДОПУСТИМЫХ ПРЕДЕЛАХ
	BNE	20$		; НЕТ
	CMP	R2,#357		; У Y-КООРДИНАТЫ МЕНЬШИЙ ПРЕДЕЛ
	BGT	20$
	PUSH	<R0>
	CALL	$COLOR		; ОПРЕДЕЛЯЕМ ЦВЕТ ТОЧКИ (X,Y)
	CMP	R0,R5		; ЦВЕТ ТОЧКИ СОВПАДАЕТ С ЦВЕТОМ ГРАНИЦЫ
	BEQ	10$		; ДА
	CMP	R0,R4		; ЦВЕТ ТОЧКИ СОВПАДАЕТ С ЦВЕТОМ ОКРАСКИ
	BEQ	10$
	POP	<R0>
	CLC
	RETURN
10$:
	POP	<R0>
20$:
	SEC
	RETURN

; .PAGE
.SBTTL	$COLOR

;------------------------------------------------------------------------------
; ВНУТРЕННЯЯ ПРОЦЕДУРА ОПРЕДЕЛЯЕТ ЦВЕТ ЗАДАННОЙ ТОЧКИ.
; РЕГИСТРЫ НА ВХОДЕ:
; R1	X-КООРДИНАТА ТОЧКИ;
; R2	Y.
; РЕГИСТРЫ НА ВЫХОДЕ:
; R0	ЦВЕТ ТОЧКИ.
; ЗА ИСКЛЮЧЕНИЕМ R0 РЕГИСТРЫ СОХРАНЯЮТСЯ.
;------------------------------------------------------------------------------

$COLOR:
	PUSH	<R1,R2>		; СОХРАНЯЕМ РЕГИСТРЫ
	ASL	R2		; УМНОЖАЕМ Y НА 100 ( OCTAL )
	ASL	R2
	ASL	R2
	ASL	R2
	ASL	R2
	ASL	R2
	MOV	R1,R0		; X
	ASR	R0		; ДЕЛЕНИЕ
	ASR	R0		; НА 4
	ADD	R2,R0		; ОТНОСИТЕЛЬНЫЙ АДРЕС БАЙТА С ТОЧКОЙ В ОЗУ
	ADD	@#204,R0	; ДОБАВЛЯЕМ АДРЕС ПЕРВОЙ ГРАФИЧЕСКОЙ СТРОКИ
				; ОТНОСИТЕЛЬНО НАЧАЛА ОЗУ-ЭКРАНА
	BIC	#140000,R0	; УЧИТЫВАЕМ, ЧТО ОЗУ-ЭКРАНА - СВИТОК
	ADD	@#202,R0	; ДОБАВЛЯЕМ АДРЕС НАЧАЛА ОЗУ-ЭКРАНА
	MOVB	(R0),R2		; БАЙТ СОБСТВЕННОЙ ПЕРСОНОЙ
	BIC	#177774,R1	; НОМЕР ТОЧКИ В БАЙТЕ:	0,1,2,3
	BEQ	20$
10$:
	ASR	R2
	ASR	R2
	SOB	R1,10$
20$:
	BIC	#177774,R2	; ВЫДЕЛЯЕМ ДВА РАЗРЯДА ТОЧКИ
	MOV	#224,R0
	SUB	R2,R0
	POP	<R2,R1>
	RETURN
; УХ!!!;-----------------------------------------------------------------
; .PAGE
;
ANG1::	MOV	16(SP),-(SP)
	MOV	16(SP),-(SP)
	MOV	16(SP),-(SP)
	BR	ANG
ANG2::	MOV	22(SP),-(SP)
	MOV	22(SP),-(SP)
	MOV	22(SP),-(SP)
ANG:	MOV	R4,-(SP)
	MOV	R4,SAVJMP
	MOV	SP,R0
	ADD	#20,R0
	MOV	-(R0),-(SP)
	MOV	-(R0),-(SP)
	MOV	-(R0),-(SP)
	MOV	-(R0),-(SP)
	JSR	R4,STAND
	.WORD	$B95
	.WORD	2$
	.WORD	ID
	.WORD	$DMUL$
	.WORD	DI
	.WORD	3$
	.WORD	4$
	.WORD	$B93
	.WORD	5$
	.WORD	ID
	.WORD	$DMUL$
	.WORD	DI
	.WORD	3$
	.WORD	6$
2$:	MOV	12(SP),-(SP)
	JMP	@(R4)+
3$:	ADD	10(SP),@SP
	JMP	@(R4)+
4$:	MOV	SP,R0
	ADD	#22,R0
	MOV	-(R0),-(SP)
	MOV	-(R0),-(SP)
	MOV	-(R0),-(SP)
	MOV	-(R0),-(SP)
	BGE	8$
	NEG	10(SP)
8$:	BIS	#100000,@SP
	JMP	@(R4)+
5$:	MOV	14(SP),-(SP)
	JMP	@(R4)+
6$:	MOV	(SP)+,16(SP)
	MOV	(SP)+,16(SP)
	MOV	(SP)+,R4
	CMP	(SP)+,(SP)+
	CMP	(SP)+,(SP)+
	TST	(SP)+
	CLR	SAVJMP
	JMP	@(R4)+
ANG01::	MOV	2(SP),-(SP)
	ADD	10(SP),@SP
	MOV	6(SP),-(SP)
	JMP	@(R4)+
ANG02::	MOV	6(SP),-(SP)
	ADD	14(SP),@SP
	MOV	12(SP),-(SP)
	JMP	@(R4)+
ASPINT::MOV	#1,-(SP)
	JMP	@(R4)+
ASPDBL::MOV	(SP)+,@SP
	MOV	(SP)+,@SP
ASPSNG::MOV	#1,R2
	MOV	(SP)+,R1
	BLE	7$
	CLR	R0
	BISB	R1,R0
	BIS	#200,R0
	ASL	R1
	CLRB	R1
	SWAB	R1
	SUB	#211,R1
	BGE	55$
	CMP	R1,#-20
	BLT	6$
1$:	INC	R1
	BEQ	3$
	ASR	R0
	BCC	1$
	ROL	R0
2$:	ASLB	R2
	BCS	4$
	INC	R1
	BNE	2$
3$:	MOV	R0,@SP
	MOV	R2,-(SP)
	JMP	@(R4)+
4$:	RORB	R2
	ASL	R2
5$:	INC	R1
	BEQ	3$
	ASR	R0
	ADC	R0
	BR	5$
55$:	MOV	#400,R0
	BR	3$
6$:	MOV	R2,R0
	MOV	#400,R2
	BR	3$
7$:	TRAP	5
ASP0::	MOV	#1,-(SP)
	MOV	#1,-(SP)
	JMP	@(R4)+
.IFT
$CONST:	MOV	R4,-(SP)
	MOV	R5,-(SP)
	TRAP	110
	BR	DRKL
	MOV	4(SP),R4
	MOV	R5,4(SP)
	MOV	(SP)+,R5
	RTS	R4
DRKL:	TRAP	5
;
.IFT
;
$VALUE: MOV	R4,-(SP)
	MOV	R5,-(SP)
	CLR	-(SP)
	TRAP	105
	BR	9$
	BR	9$
	BR	9$
	TRAP	104
	TST	R4
	BEQ	9$
	MOV	(R4)+,@SP
	TSTB	TYPE
	BMI	9$
	MOV	R1,R5
	MOV	@R4,@SP
	MOV	-(R4),-(SP)
	JSR	R4,STAND
	.WORD	SI,1$
1$:	MOV	R5,R1
9$:	MOV	6(SP),R4
	MOV	(SP)+,4(SP)
	MOV	(SP)+,R5
	RTS	R4
;
$STRNG:	CLR	-(SP)
	MOV	R4,-(SP)
	MOV	R5,-(SP)
	TRAP	105
	BR	DRKL
	BR	DRKL
	BR	1$
	BR	DRKL
1$:	TRAP	104
	TST	R4
	BEQ	5$
	MOV	6(SP),R5
	MOV	(R4)+,4(SP)
	MOV	@R4,6(SP)
	MOV	R5,R4
4$:	MOV	(SP)+,R5
	RTS	R4
5$:	MOV	6(SP),R4
	CLR	6(SP)
	BR	4$

; .PAGE
.SBTTL	$ARC	ARC DRAWING

;------------------------------------------------------------------------------
; ПРОЦЕДУРА ПОСТРОЕНИЯ ДУГИ ОКРУЖНОСТИ ( ПСЕВДОЭЛИПСА ).
; СТЕК НА ВХОДЕ:
; 22(SP)	X-КООРДИНАТА ЦЕНТРА ОКРУЖНОСТИ;
; 20(SP)	Y;
; 16(SP)	РАДИУС;
; 14(SP)	ЦВЕТ ОТРИСОВКИ;
; 12(SP)	X-КООРДИНАТА НАЧАЛЬНОЙ ТОЧКИ;
; 10(SP)	Y;
;  6(SP)	X-КООРДИНАТА КОНЕЧНОЙ ТОЧКИ;
;  4(SP)	Y;
;  2(SP)	ЧИСЛИТЕЛЬ СООТНОШЕНИЯ КООРДИНАТ;
;   (SP)	ЗНАМЕНАТЕЛЬ;
; ЕСЛИ X-КООРДИНАТЫ ГРАНИЧНЫХ ТОЧЕК ОТРИЦАТЕЛЬНЫЕ, ТО ПРОВОДЯТСЯ ПРЯМЫЕ,
; СОЕДИНЯЮЩИЕ ЭТИ ТОЧКИ С ЦЕНТРОМ ОКРУЖНОСТИ.
;------------------------------------------------------------------------------

.IFT
$ARC::
	PUSH	<@#214,R4,R5>
	MOV	R4,SAVJMP
	MOV	22(SP),R0		; КОД ЦВЕТА
	BEQ	10$
	EMT	16       		; УСТАНАВЛИВАЕМ ЦВЕТ ОТРИСОВКИ
10$:
	MOV	20(SP),R1		; XS < 0 ?
	BGE	12$			; НЕТ
	NEG	R1
	NEG	20(SP)			; XS = -XS
	MOV	16(SP),R2		; YS
	CMP	10(SP),6(SP)		; ЕСТЬ СЖАТИЕ ПО ОДНОЙ ИЗ ОСЕЙ ?
	BEQ	106$			; НЕТ
	BLT	103$			; ДА, ПО ОСИ Y
	SUB	30(SP),R1
	PUSH	<R2,R1,12(SP)>		; СЖАТИЕ ПО ОСИ X
	JSR	R4,STAND
	.WORD	SAND	
	.WORD	101$
	.WORD	IDIV
	.WORD	102$
101$:
	PUSH	<14(SP)>
	JMP	@(R4)+
102$:
	POP	<R1,R2>
	ADD	30(SP),R1
	BR	106$
103$:
	SUB	26(SP),R2		; СЖАТИЕ ПО ОСИ X
	PUSH	<R1,R2,14(SP)>
	JSR	R4,STAND
	.WORD	SAND
	.WORD	104$
	.WORD	IDIV
	.WORD	105$
104$:
	PUSH	<12(SP)>
	JMP	@(R4)+
105$:
	POP	<R2,R1>
	ADD	26(SP),R2
106$:
	CLR	R0
	INC	R0
	EMT	30
	MOV	30(SP),R1		; XC
	MOV	26(SP),R2		; YC
	EMT	32			; ЧЕРТИМ ОТРЕЗОК (XS,YS)-(XC,YC)
12$:
	MOV	14(SP),R1		; XT < 0 ?
	BGE	14$			; НЕТ
	NEG	R1
	NEG	14(SP)			; XT = -XT
	MOV	12(SP),R2		; YT
	CMP	10(SP),6(SP)
	BEQ	126$
	BLT	123$
	SUB	30(SP),R1
	PUSH	<R2,R1,12(SP)>
	JSR	R4,STAND
	.WORD	SAND
	.WORD	121$
	.WORD	IDIV
	.WORD	122$
121$:
	PUSH	<14(SP)>
	JMP	@(R4)+
122$:
	POP	<R1,R2>
	ADD	30(SP),R1
	BR	126$
123$:
	SUB	26(SP),R2
	PUSH	<R1,R2,14(SP)>
	JSR	R4,STAND
	.WORD	SAND
	.WORD	124$
	.WORD	IDIV
	.WORD	125$
124$:
	PUSH	<12(SP)>
	JMP	@(R4)+
125$:
	POP	<R2,R1>
	ADD	26(SP),R2
126$:
	CLR	R0
	INC	R0
	EMT	30
	MOV	30(SP),R1		; XC
	MOV	26(SP),R2		; YC
	EMT	32			; ЧЕРТИМ ОТРЕЗОК (XT,YT)-(XC,YC)
14$:
	CLR	R1			; 0 - НАЧАЛЬНОЕ ЗНАЧЕНИЕ X-КООРДИНАТЫ
					; В ПЕРВОМ КВАДРАНТЕ
	MOV	24(SP),R2		; R - НАЧАЛЬНОЕ ЗНАЧЕНИЕ Y-КООРДИНАТЫ
					; В ПЕРВОМ КВАДРАНТЕ
	MOV	R2,R3			; ДАЛЕЕ ВЫЧИСЛЯЕМ D[0]
	DEC	R3
	NEG	R3
	ASL	R3			; D[0]
	CMP	20(SP),14(SP)		; X-КООРДИНАТЫ НАЧАЛЬНОЙ И КОНЕЧНОЙ
					; ТОЧЕК ДУГИ СОВПАДАЮТ ?
	BNE	20$			; НЕТ
	CMP	16(SP),12(SP)		; НАЧАЛЬНАЯ И КОНЕЧНАЯ ТОЧКИ
					; СОВПАДАЮТ ?
	BNE	20$			; НЕТ
	MOV	#125252,R5		; ЗАДАЕМ ОТРИСОВКУ ВСЕЙ ОКРУЖНОСТИ
	JMP	$ASET
20$:
	SUB	30(SP),20(SP)		; ПЕРЕХОДИМ В СИСТЕМУ КООРДИНАТ
	SUB	26(SP),16(SP)		; С НАЧАЛОМ В ЦЕНТРЕ ОКРУЖНОСТИ
	SUB	30(SP),14(SP)
	SUB	26(SP),12(SP)
	CLR	R0			; R0 - НОМЕР КВАДРАНТА С ( XS, YS )
	TST	20(SP)
	BGE	30$
	INC	R0
	INC	R0
	TST	16(SP)
	BLT	40$
	BR	35$

30$:
	TST	16(SP)
	BGE	40$
35$:
	INC	R0
40$:
	CLR	R4			; R4 - НОМЕР КВАДРАНТА С ( XT, YT )
	TST	14(SP)
	BGE	50$
	INC	R4
	INC	R4
	TST	12(SP)
	BLT	60$
	BR	55$
50$:
	TST	12(SP)
	BGE	60$
55$:
	INC	R4
60$:					; "ПЕРЕНОСИМ" НАЧАЛЬНУЮ И КОНЕЧНУЮ
	ASL	R0			; ТОЧКИ В 1-ЫЙ КВАДРАНТ
	JMP	@$QS(R0)
$QS1:
	PUSH	<20(SP)>
	MOV	20(SP),22(SP)		; X=-Y
	NEG	22(SP)
	POP	<16(SP)>		; Y=X
	BR	$QS0
$QS2:
	NEG	20(SP)			; X=-X
	NEG	16(SP)			; Y=-Y
	BR	$QS0
$QS3:
	PUSH	<20(SP)>
	MOV	20(SP),22(SP)		; X=Y
	POP	<16(SP)>		; Y=-X
	NEG	16(SP)
	BR	$QS0
$QS0:
	ASR	R0
	ASL	R4
	JMP	@$QT(R4)
$QT1:
	PUSH	<14(SP)>
	MOV	14(SP),16(SP)
	NEG	16(SP)
	POP	<12(SP)>
	BR	$QT0
$QT2:
	NEG	14(SP)
	NEG	12(SP)
	BR	$QT0
$QT3:
	PUSH	<14(SP)>
	MOV	14(SP),16(SP)
	POP	<12(SP)>
	NEG	12(SP)
$QT0:
	ASR	R4
	CLR	R5
	CMP	R0,R4			; НАЧАЛЬНАЯ И КОНЕЧНАЯ ТОЧКИ
					; В ОДНОМ КВАДРАНТЕ
	BEQ	40$			; ДА
	PUSH	<#6>
	CALL	$SETCD
10$:
	INC	R0
	CMP	#4,R0
	BNE	20$
	CLR	R0
20$:
	CMP	R0,R4
	BEQ	30$
	PUSH	<#12>
	CALL	$SETCD
	BR	10$
30$:
	PUSH	<#2>
	CALL	$SETCD
	BR	$ASET
40$:
	CMP	20(SP),14(SP)		; XS-XT>0 ?
	BGT	50$
	PUSH	<#10>
	CALL	$SETCD
	BR	$ASET
50$:
	MOV	#125252,R5
	PUSH	<#4>
	CALL	$SETCD
$ASET:
	CALL	$P4SET
	TST	R5			; ПОСТРОЕНА ВСЯ ДУГА ?
	BEQ	$AEND			; ДА
	MOV	R3,R0			; D[I]
	BGT	20$
;------ D[I] <= 0
	ADD	R2,R0			; ВЫЧИСЛЯЕМ L[I]
	ASL	R0
	DEC	R0
	BGT	10$
;...... D[I] <= 0 AND L[I] <= 0   ===> M1
	INC	R1			; X[I+1]=X[I]+1
	MOV	R1,R0
	ASL	R0
	ADD	R0,R3
	INC	R3			; D[I+1]=D[I]+2*X[I+1]+1
	BR	$ASET
;...... D[I] <= 0 AND L[I] > 0 OR D[I] >= 0 AND L'[I] <= 0 ====> M2
10$:
	INC	R1			; X[I+1]=X[I]+1
	DEC	R2			; Y[I+1]=Y[I]-1
	MOV	R1,R0
	SUB	R2,R0
	INC	R0
	ASL	R0
	ADD	R0,R3			; D[I+1]=D[I]+2*X[I+1]-2*Y[I+1]+2
	BR	$ASET
;------ D[I] > 0
20$:
	SUB	R1,R0			; ВЫЧИСЛЯЕМ L'[I]
	ASL	R0
	DEC	R0
	BLE	10$
;...... D[I] > 0 AND L'[I] > 0
	DEC	R2			; Y[I+1]=Y[I]-1
	MOV	R2,R0
	ASL	R0
	SUB	R0,R3
	INC	R3
	BR	$ASET
$AEND:
	POP	<R5,R4,R3>
	ADD	#20,SP
	POP	<R2,R1>
	CALL	$COLOR
	EMT	16
	EMT	30
	CLR	SAVJMP
	JMP	COLRET
$QS:
	.WORD	$QS0
	.WORD	$QS1
	.WORD	$QS2
	.WORD	$QS3
$QT:
	.WORD	$QT0
	.WORD	$QT1
	.WORD	$QT2
	.WORD	$QT3

; .PAGE
.SBTTL	$SETCD	QUADRANT CODE SETTING

;------------------------------------------------------------------------------
; ВНУТРЕННЯЯ ПРОЦЕДУРА ОПРЕДЕЛЕНИЯ КОДА КВАДРАНТА.
; СТЕК НА ВХОДЕ:
; 2(SP)		УСТАНАВЛИВАЕМЫЙ КОД;
;  (SP)		АДРЕС ВОЗВРАТА.
;------------------------------------------------------------------------------
 
$SETCD:
	PUSH	<R0,R1,R2>
	MOV	10(SP),R1		; УСТАНАВЛИВАЕМЫЙ КОД
	MOV	#17,R2			; МАСКА
	TST	R0
	BEQ	20$
10$:
	ASL	R1
	ASL	R1
	ASL	R1
	ASL	R1
	ASL	R2
	ASL	R2
	ASL	R2
	ASL	R2
	SOB	R0,10$
20$:
	BIC	R2,R5
	BIS	R1,R5
	POP	<R2,R1,R0,(SP)>
	RETURN

; .PAGE
.SBTTL	$P4SET	SYMMETRICAL POINTS CHECKING AND DRAWING

;------------------------------------------------------------------------------
; ВНУТРЕННЯЯ ПРОЦЕДУРА ПРОВЕРКИ ДОПУСТИМОСТИ И ОТРИСОВКИ 4-Х СИММЕТРИЧНЫХ
; ТОЧЕК.
; ВХОДНЫЕ ПАРАМЕТРЫ:
; R1	ОТНОСИТЕЛЬНАЯ X-КООРДИНАТА ТОЧКИ ( В 1-ОМ КВАДРАНТЕ );
; R2	Y;
; R5	КОД КВАДРАНТА.
; ВЫХОДНЫЕ ПАРАМЕТРЫ:
; R5	КОД КВАДРАНТА.
; НЕ СОХРАНЯЕТСЯ R0.
; ВНИМАНИЕ!!! СИЯ ПРОЦЕДУРА НАГЛО ИСПОЛЬЗУЕТ ЗНАНИЕ СТЕКА, ПОЭТОМУ ЛЮБЫЕ
; ИСПРАВЛЕНИЯ В ВЫЗЫВАЮЩЕЙ ПРОЦЕДУРЕ $ARC, ЗАТРАГИВАЮЩИЕ СТЕК ПРИВЕДУТ
; К НЕОБХОДИМОСТИ ЕЕ КОРРЕКЦИИ.
;------------------------------------------------------------------------------

$P4SET:
	PUSH	<R5,R5>
	CLR	R0			; НОМЕР КВАДРАНТА ( 0,1,2,3 )
$P4CYC:
	BIC	#177760,R5		; ВЫДЕЛЯЕМ КОД ОЧЕРЕДНОГО КВАДРАНТА
	JMP	@$CODE(R5)		; ОБРАБАТЫВАЕМ ТОЧКУ В ВЫДЕЛЕННОМ
					; КВАДРАНТЕ СОГЛАСНО ЕЕ КОДУ

$C0000:					; ДУГА В КВАДРАНТЕ НЕ ВЫЧЕРЧИВАЕТСЯ
	INC	R0
	CMP	#4,R0			; ОБРАБОТАНЫ ВСЕ КВАДРАНТЫ ?
	BNE	10$
	JMP	$P4END			; ДА
10$:
	POP	<R5>
	ASR	R5
	ASR	R5
	ASR	R5
	ASR	R5
	PUSH	<R5>
	BR	$P4CYC
$C0010:					; ДУГА ВЫЧЕРЧИВАЕТСЯ ОТ НАЧАЛА
					; КВАДРАНТА ДО КОНЕЧНОЙ ТОЧКИ
	CMP	R1,22(SP)		; ДОСТИГНУТА КОНЕЧНАЯ ТОЧКА ?
	BLT	$L2			; НЕТ
	CMP	R2,20(SP)
	BGT	$L2
	CLR	R5			; УСТАНАВЛИВАЕМ, ЧТО В ОСТАВШЕЙСЯ
					; ЧАСТИ КВАДРАНТА ДУГА НЕ ВЫЧЕРЧИ-
					; ВАЕТСЯ
$L0:					; ДАЛЕЕ СЛЕДУЕТ УСТАНОВКА КОДА
					; ВЫЧЕРЧИВАЕМОСТИ ДУГИ В ДАННОМ
					; КВАДРАНТЕ
	MOV	#17,R4			; МАСКА
	PUSH	<R0>			; СОХРАНЯЕМ НОМЕР КВАДРАНТА
	BEQ	$L1
10$:
	ASL	R5
	ASL	R5
	ASL	R5
	ASL	R5
	ASL	R4
	ASL	R4
	ASL	R4
	ASL	R4
	SOB	R0,10$
$L1:
	POP	<R0>			; ВОССТАНАВЛИВАЕМ НОМЕР КВАДРАНТА
	BIC	R4,2(SP)		; ГАСИМ ПРЕДЫДУЩИЙ КОД
	BIS	R5,2(SP)		; УСТАНАВЛИВАЕМ НОВЫЙ
$L2:					; ОТРИСОВКА ТОЧКИ
	PUSH	<R0,R1,R2>
	ASL	R0
	JMP	@$QUA(R0)
$Q0:
	PUSH	<R3,R4,R5>		; STAND, SAND IDIV ПОРТЯТ РЕГИСТРЫ
	CMP	32(SP),30(SP)
	BEQ	$L8
	BLT	$L5
	PUSH	<R2,R1,34(SP)>
	JSR	R4,STAND
	.WORD	SAND
	.WORD	$L3
	.WORD	IDIV
	.WORD	$L4
$L3:
	PUSH	<36(SP)>
	JMP	@(R4)+
$L4:
	POP	<R1,R2>			; ПРЕОБРАЗОВАННАЯ X-КООРДИНАТА
	BR	$L8
$L5:
	PUSH	<R1,R2,36(SP)>
	JSR	R4,STAND
	.WORD	SAND
	.WORD	$L6
	.WORD	IDIV
	.WORD	$L7
$L6:
	PUSH	<34(SP)>
	JMP	@(R4)+
$L7:
	POP	<R2,R1>			; ПРЕОБРАЗОВАННАЯ Y-КООРДИНАТА
$L8:
	POP	<R5,R4,R3>
	CLR	R0
	INC	R0			; УСТАНАВЛИВАЕМ ОТРИСОВКУ
	ADD	44(SP),R1
	ADD	42(SP),R2
	EMT	30			; ВЫВОДИМ ТОЧКУ
	POP	<R2,R1,R0>
	BR	$C0000
$Q1:
	MOV	R2,R1			; X=Y
	MOV	2(SP),R2		; Y=-X
	NEG	R2
	BR	$Q0
$Q2:
	NEG	R1			; X=-X
	NEG	R2			; Y=-Y
	BR	$Q0
$Q3:
	MOV	R2,R1			; X=-Y
	NEG	R1
	MOV	2(SP),R2		; Y=X
	BR	$Q0
$C0100:					; ДУГА ВЫЧЕРЧИВАЕТСЯ ОТ НАЧАЛА
					; КВАДРАНТА ДО КОНЕЧНОЙ ТОЧКИ И
					; ОТ НАЧАЛЬНОЙ ТОЧКИ ДО КОНЦА
					; КВАДРАНТА
	CMP	R1,22(SP)		; КОНЕЧНАЯ ТОЧКА ДОСТИГНУТА ?
	BLT	$L2			; НЕТ
	CMP	R2,20(SP)
	BGT	$L2
	MOV	#6,R5			; УСТАНАВЛИВАЕМ ПРИЗНАК ОТРИСОВКИ
					; ОТ НАЧАЛЬНОЙ ТОЧКИ ДО КОНЦА
					; КВАДРАНТА
	BR	$L0
$C0110:					; ДУГА ВЫЧЕРЧИВАЕТСЯ ОТ НАЧАЛЬНОЙ
					; ТОЧКИ ДО КОНЦА КВАДРАНТА
	CMP	R1,26(SP)		; НАЧАЛЬНАЯ ТОЧКА ДОСТИГНУТА ?
	BLT	$C0000			; НЕТ
	CMP	R2,24(SP)
	BGT	$C0000
	MOV	#12,R5			; УСТАНАВЛИВАЕМ ПРИЗНАК ОТРИСОВКИ
					; ВСЕГО ( ОСТАВШЕГОСЯ) КВАДРАНТА
	BR	$L0
$C1000:					; ДУГА ВЫЧЕРЧИВАЕТСЯ В ПРЕДЕЛАХ
					; ОДНОГО КВАДРАНТА ОТ НАЧАЛЬНОЙ
					; ДО КОНЕЧНОЙ ТОЧКИ
	CMP	R1,26(SP)		; НАЧАЛЬНАЯ ТОЧКА ДОСТИГНУТА ?
	BGE	5$
	JMP	$C0000			; НЕТ
5$:
	CMP	R2,24(SP)
	BLE	10$
	JMP	$C0000
10$:
	MOV	#2,R5			; УСТАНАВЛИВАЕМ ПРИЗНАК ОТРИСОВКИ
					; ОТ НАЧАЛА КВАДРАНТА ДО КОНЕЧНОЙ
					; ТОЧКИ
	BR	$L0
$C1010:					; ДУГА ЧЕРТИТСЯ ВО ВСЕМ КВАДРАНТЕ
	CMP	R1,32(SP)		; ДОСТИГНУТ КОНЕЦ КВАДРАНТА ?
	BLT	$L2			; НЕТ
	TST	R2
	BGT	$L2
	CLR	R5
	BR	$L0
$P4END:
	POP	<R5,R5>
	RETURN
$CODE:
	.WORD	$C0000
	.WORD	$C0010
	.WORD	$C0100
	.WORD	$C0110
	.WORD	$C1000
	.WORD	$C1010
$QUA:
	.WORD	$Q0
	.WORD	$Q1
	.WORD	$Q2
	.WORD	$Q3
; УХ!!!
.IFT
.MACRO	PUSH	ARGS		; PUSH:  АРГ-->СТЕК
.IRP	ARG,<ARGS>
	MOV	ARG,-(SP)
.ENDR
.ENDM
.MACRO	POP	ARGS		; POP:   СТЕК-->АРГ
.IRP	ARG,<ARGS>
	MOV	(SP)+,ARG
.ENDR
.ENDM
;************************************************
;		ПРОГРАМА  ОПЕРАТОРА DRAW
;	НА ВХОДЕ:	В СТЕКЕ 2(SP) -АДРЕС СТРОКИ
;				 (SP) -ДЛИНА СТРОКИ
;	НА ВЫХОДЕ:	СТЕК ПУСТ
;	ВСЕ РЕГИСТРЫ СОХРАНЮТСЯ.ПРИ ВЫЗОВАХ $CONST,$VALUE,$STRNG R4 СОХР.
;************************************************
;
$DRAW::
	MOV	R4,SAVJMP
	MOV	R5,R0		; СОХРАНИТЬ
	POP	<R5,R3>		; ИЗВЛЕЧЬ ДЛ. И АДР.СТР
	PUSH	<R0,@#214>	; СОХР. R5,ЦВЕТ
	MOV	$DRVX,R1	; НАЧАЛЬНОЕ ПОЛОЖЕНИЕ
	MOV	$DRVY,R2	; НАЧАЛЬНОЕ ПОЛОЖЕНИЕ
	CLR	-(SP)		; ЗАПИСЬ СЛОВ( 0,0 -ПРИЗНАК ОКОНЧАНИЯ ),
	CLR	-(SP)
	MOV	#70000,-(SP)	; И СЛОВА ПЕРЕМЕЩЕНИЙ  ( WM )( 70000 )
NEWSTR:
	TST	R3		; НУЛЕВОЙ АДРЕС-ПРИЗНАК КОНЦА ?
	BEQ	OUT		; ДА--ВЫХОД ИЗ  $DRAW
	ADD	R3,R5		; КОРРЕКЦИЯ R5<--АДРЕС ПОСЛЕДН. БАЙТА СТРОКИ
	DEC	R5
AGAIN:
;----------------------------------------------------------------------
;  SKANER ОПРЕДЕЛЯЕТ ПРИНАДЛЕЖНОСТЬ СИМВОЛА (R3) К КЛЮЧАМ.ДЛЯ КЛЮЧЕВОГО
;	  B R0 СМЕЩЕНИЕ ЕГО В  СТРОКЕ KEY УМНОЖЕННОЕ НА 2
;	!!!!! R3 НА ВЫХОДЕ УКАЗЫВАЕТ НА СЛЕДУЮЩИЙ  СИМВOЛ  !!!!!!
;----------------------------------------------------------------------
;SKANER
	TRAP	112
	CMP	R3,R5		; КОНЕЦ ОБРАБОТКИ ПОДСТРОКИ?
	BHI	NEXT		; ДА
	CLR	R0		; ПЕРВОНАЧАЛЬНО  НУЛЕВОЕ СМЕЩЕНИЕ
1$:	CMPB	KEY(R0),(R3)	; СИМВОЛЫ СХОДЯТСЯ
	BEQ	2$		; ДА-НА ВЫХОД
	INC	R0		; НЕТ--СЛЕДУЮЩИЙ
	TSTB	KEY(R0)		; НУЛЕВОЙ ? ДА-НА ВЫХОД
	BNE	1$		; НЕТ--ОПЯТЬ СРАВНЕНИЕ
	BR	ERROR		; НЕ КЛЮЧ
2$:	ASL	R0		;  * 2
	INC	R3		; ПРОДВИЖЕНИЕ R3
;----------------------------------------------------------
;	SELEKTOR ОСУЩЕСТВЛЯЕТ ВЕТВЛЕНИЕ ПО ОБРАБОТКЕ КЛЮЧЕЙ
;----------------------------------------------------------
;SELEKTOR
	CMP	R0,#16		; ПЕРЕМЕЩЕНИЕ  RLDUEFGH
	BLT	3$		; НЕТ
	JMP	RDEG$		; ДА--НА RDEG$
3$:	JMP	@CASE(R0)	; НЕТ---ВЕТВЛЕНИE
;
KEY:
	.ASCIZ	/MNBCSAXRULDRULEHGFEHG/		; КЛЮЧИ
	.EVEN
CASE:
	.WORD	M$,N$,B$,C$,S$,A$,X$		;МЕТКИ ПЕРЕXОДА SELEKTOR
;
NEXT:				; ОБРАБОТКА СЛЕД. ПОДСТРОКИ
	POP	<R0,R5,R3>	; ЧТЕНИЕ WM,АДР.И ДЛ. СТРОКИ
	PUSH	R0		; ЗАПИСЬ WM
	BR	NEWSTR
;------------------------------
;	X$---ОБРАБОТКА ПОДСТРОК
;------------------------------
.IFT
X$:
	POP	R0		; СОХРАНИТЬ WM
	CMP	-(SP),-(SP)	; ЗАРЕЗЕРВИРОВАТЬ 2 СЛОВА
	CALL	BLNC		; ПРОПУСК ПРОБЕЛОВ
	CALL	$STRNG		; ПОЛУЧЕНИЕ В СТЕКЕ АДРЕСА НОВОЙ ПОДСТРОКИ
				;   И ЕЕ ДЛИНЫ. R3 АВТОМАТИЧЕСКИ ПРОДВИНУТ
	CALL	BLNC		; ПРОПУСК ПРОБЕЛОВ
	BNE	ERROR		; ОГРАНИЧИТЕЛЬ-";" ? НЕТ-ОШИБКА
	INC	R3		; ПРОПУСК ";"
	SUB	R3,R5		; КОРРЕКЦИЯ R5<--ДЛИНА СТРОКИ
	INC	R5
	MOV	R3,6(SP)	; ЗАПИСЬ В ОТКЛАДЫВАЕМЫХ
	MOV	R5,4(SP)	;    АДРЕСА И  ДЛИНЫ
	POP	<R5,R3> 	; ПОЛУЧЕНИЕ НОВЫХ
	PUSH	R0		; ВОССТ. WM
	BR	NEWSTR
.IFT
;
ERROR:				; ОШИБКА
	TRAP	5
;
BLNC:	TRAP	112		;ПРОПУСК ПРОБЕЛОВ
	CMP	R3,R5
	BHI	ERROR
	CMPB	#';,@R3
	RETURN
;
RET:
	POP	<@#214,R5>	; ВОССТ. ЦВЕТ,R5
	CLR	SAVJMP
	JMP	@(R4)+		; !!!!!!!!! ВЫХОД ИЗ $DRAW
;
OUT:
	TST	(SP)+		; ОЧИСТКА СТЕКА WM
	BR	RET		; HA ВЫХОД ИЗ $DRAW
;-----------------------------------------
;		ОБРАБОТКА ОТДЕЛЬНЫХ КОМАНД
;-----------------------------------------
B$:				; КОМ. B--"ПОДНЯТОЕ ПЕРО"
	BIS	#4000,(SP)	; УСТАНОВКА БИТА 11 В СЛОВЕ ПЕРЕМЕЩ.
	BR	AGAIN
;
N$:				; КОМ. N--ВОЗВРАТ К НУЛЮ
	BIS	#100000,(SP)	; УСТАНОВКА БИТА 15-ПРИЗНАК ВОЗВРАТА К ТЧ.(0,0)
	BR	AGAIN
;
S$:				; КОМ. S--УСТАНОВКА МАСШТАБН.КОЕФФ.
	MOV	#4,R0		; УМОЛЧАНИЕ
	CALL	$$SENSE		; ЧТЕНИЕ ЗНАЧЕНИЯ
	BEQ	ERROR		; НУЛЕВОЙ МАСШТАБ--ОШИБКА
	MOVB	R0,$SCRT	; ЗАСЫЛКА В СЛОВО ВРАЩЕНИЯ-МАСШТ.
	BR	AGAIN
;
C$:				; КОМ. C--УСТАНОВКА ЦВЕТА
	CLR	R0		; УМОЛЧАНИЕ
	CALL	$$SENSE		; ЧТЕНИЕ
	TST	R0
	BEQ	1$
	CMP	#4,R0		; R0<=4
	BLO	ERROR		; НЕТ-ОШИБКА
	ADD	#220,R0		; R0+220= КОДЫ ЦВЕТОВ:   КРАСНЫЙ  221
				;			 ЗЕЛЕНЫЙ  222
				;			 СИНИЙ    223
				;			 ЧЕРНЫЙ   224
	EMT	16		; ПЕРЕДАЧА КОДА В ДРАЙВЕР
	BR	AGAIN
1$:	MOV	@#212,@#214
	BR	AGAIN
;
A$:				; КОМ. А--ВРАЩЕНИЕ ОСЕЙ
	CLR	R0		; УМОЛЧАНИЕ
	CALL	$$SENSE		; ПОЛУЧЕНИЕ ЗНАЧЕНИЯ
	CMP	R0,#4		; ПРОВЕРКА ГРАНИЦ
	BHIS	ERROR
	MOVB	R0,$SCRT+1	; УСТАНОВКА НОВОГО ЗНАЧЕНИЯ ВРАЩЕНИЯ
JAG:	BR	AGAIN
;----------------------------------------
;		ВХОД ДЛЯ ОБРАБОТКИ КОМ. M
;----------------------------------------
M$:
	PUSH	<R1,R2>		; СОХРАНЕНИЕ КООРДИНАТ
	CALL	$$SIGN		; ПОЛУЧЕНИЕ ЗНАКА
	CLR	R0		; УМОЛЧАНИЕ
	CALL	$$SENSE		; ПОЛУЧЕНИЕ ЗНАЧЕНИЯ
	BIT	#400,4(SP)	; ОТНОСИТЕЛЬНОЕ
	BEQ	1$		; НЕТ
	CALL	$$SCALE		; ДА--МАСШТАБИРОВАНИЕ
1$:	MOV	R0,R1		; КООРДИНАТА Х
	CALL	BLNC		; ПРОПУСК ПРОБЕЛОВ
	CMPB	#',,(R3)	; "," ?
	BNE	ERROR		; НЕТ--ОШИБКА
	INC	R3		; ПРОПУСК ","
	ASLB	4(SP)		; В WM БИТ 1--X,БИТ 0--Y
	CALL	$$SIGN		; ПОЛУЧЕНИЕ ЗНАКА Y
	CLR	R0		; УМОЛЧАНИЕ
	CALL	$$SENSE		; ПОЛУЧЕНИЕ ЗНАЧЕНИЯ  Y
	BIT	#400,4(SP)	; ОТНОСИТЕЛЬНОЕ ?
	BEQ	2$		; НЕТ
	CALL	$$SCALE		; ДА--МАСШТАБИРОВАНИЕ
2$:	MOV	R0,R2		; СМЕЩЕНИЕ ПО Y
	CMP	(SP)+,(SP)+	; УКАЗАТЕЛЬ СТЕКА НА WM
	BIT	#400,(SP)	; ОТНОСИТЕЛЬНОЕ ?
	BEQ	MOVIN		; НЕТ- АБСОЛЮТ.
;*******	ОТНОСИТЕЛЬНОЕ
	MOVB	$SCRT+1,R0	; БАЙТ ВРАЩЕНИЯ
	CMP	#2,R0		; А0 ИЛИ А1
	BGT	5$		; ДА
	NEG	R2		; НЕТ--ИЗМЕНЕНИЕ ЗНАКА ДY
5$:	DEC	R0
	CMP	#2,R0		; А1 ИЛИ А2
	BLOS	6$
	NEG	R1		; ДА-ИЗМЕНЕНИЕ ЗНАКА ДХ
6$:	ASRB	(SP)		; ЗНАК "-" ПРИ ДY ?
	BCC	7$		; НЕТ
	NEG	R2		; ДА-ИЗМЕНЕНИЕ ЗНАКА ДY
7$:	ASRB	(SP)		; ЗНАК "-" ПРИ ДХ ?
	BCC	8$		; НЕТ
	NEG	R1		; ДА--ИЗМЕНЕНИЕ ЗНАКА ДХ
8$:	ASR	R0		; А0 ИЛИ А2
	BCS	9$		; ДА
	MOV	R1,R0		; НЕТ-ПЕРЕСТАНОВКА
	MOV	R2,R1
	MOV	R0,R2
9$:	ADD	-2(SP),R1	; ПРИБАВЛЕНИЕ КООРДИНАТ
	ADD	-4(SP),R2	; ПРИБАВЛЕНИЕ КООРДИНАТ
	BR	MOVIN		; ПЕРЕХОД НА ПЕРЕМЕЩЕНИЕ
;-------------------------------------------------------------
;			ВХОД  ОБРАБОТКИ КОМ.   R,L,D,U,E,F,G,H
;-------------------------------------------------------------
;		R U  L D  R U  L E  H  G  F  E  H  G
COD:	.BYTE	2,11,3,10,2,11,3,16,13,17,12,16,13,17
;-------------------------------------------------------------
RDEG$:
	SUB	#16,R0		; КОРРЕКЦИЯ СМЕЩЕНИЯ
	ASR	R0		; -----"----"---
	PUSH	R0		; ОЧИСТИТЬ R0 ,СОХРАНИВ В СТЕКЕ
	MOVB	$SCRT+1,R0	; БАЙТ ВРАЩЕНИЯ ИЗ $SCRT--> В R0
	ADD	(SP)+,R0	; СЛОЖЕНИЕ СМЕЩЕНИЯ И БАЙТА ВРАЩЕНИЯ В R0
	MOVB	COD(R0),(SP)	; ЗАСЛАТЬ КОД В СЛОВО ПЕРЕМЕЩЕНИЙ
	MOV	#1,R0		; УМОЛЧАНИЕ
	CALL	$$SENSE		; ПОЛУЧИТЬ ЗНАЧЕНИЕ
	CALL	$$SCALE		; МАСШТАБИРОВАНИЕ
	ASRB	(SP)		; БИТ 1-- ОТРИЦАТЕЛЬНЫЙ R0 ?
	BCC	1$		; ДА --ИЗМЕНЕНИЕ ЗНАКА
	NEG	R0		; -R0
1$:	ASRB	(SP)		; БИТ 2--СМЕЩЕНИЕ ПО Х
	BCC	2$		; НЕТ
	ADD	R0,R1		; СМЕЩЕНИЕ ПО  Х
2$:	ASRB	(SP)		; БИТ 3-- ИЗМЕНЕНИЕ ЗНАКА R0 ?
	BCC	3$		; НЕТ
	NEG	R0		; ИЗМЕНЕНИЕ ЗНАКА
3$:	ASRB	(SP)		; БИТ 4-- СМЕЩЕНИЕ ПО Y
	BCC	MOVIN		; НЕТ -ПЕРЕХОД НА ПЕРЕМЕЩЕНИЕ
	ADD	R0,R2		; СМЕЩЕНИЕ ПО Y
;----------------------------------
;			ПЕРЕМЕЩЕНИЯ
;----------------------------------
MOVIN:
	CLR	R0		; СТИРАНИЕ R0=0
	MOV	$DRVX,-(SP)
	MOV	$DRVY,-(SP)
	BIT	#4000,4(SP)	; 11-БИТ:РИСОВАНИЕ (0)--ПЕРЕМЕЩЕНИЕ (1)
	BNE	1$		; ПЕРЕМЕЩЕНИЕ
	INC	R0		; РИСОВАНИЕ--ЗАПИСЬ R0=1
	EMT	32		; ВЕКТОР
	BR	2$
1$:	EMT	30		; ПЕРЕМЕЩЕНИЕ--ТОЧКА
2$:	TST	4(SP)		; ВОЗВРАТ К ПРЕЖНИМ КООРДИНАТАМ?
	BPL	3$		; НЕТ
	CLR	R0
	MOV	(SP)+,R2	; ДА- ВОССТАНОВЛЕНИЕ КООРДИНАТ
	MOV	(SP)+,R1
	EMT	30
	BR	4$
3$:	CMP	(SP)+,(SP)+
4$:	MOV	#70000,(SP)
	JMP	AGAIN
;-----------------------------------------
;		ПОЛУЧЕНИЕ ЗНАKА ДЛЯ КОМ. М
;-----------------------------------------
$$SIGN:
	CALL	BLNC		; ПРОПУСК ПРОБЕЛОВ
	CMPB	#'+,(R3)	; ПЛЮС ?
	BNE	1$		; НЕТ
	BIS	#400,6(SP)	; ДА--УСТАНОВКА БИТА 8
	BIC	#1,6(SP)	; CБРОС БИТА 0
	INC	R3		; ПРОПУСК "+"
	BR	2$
1$:	CMPB	#'-,(R3)	; МИНУС ?
	BNE	2$		; НЕТ
	BIS	#401,6(SP)	; ДА--УСТАНОВКА БИТОВ 0 И 8
	INC	R3		; ПРОПУСК "-"
2$:	RETURN
;------------------------------------------------------------------
;		ПРОГРАММА $$SCALE  КОРРЕКТИРУЕТ R0 В СООТВЕТСТВИИ С
;		МАСШТАБОМ, Т.Е. ДЕЛИТ НА 4 И УМНОЖАЕТ НА МАСШТАБНЫЙ
;		КОЭФФИЦИЕНТ,КОТОРЫЙ ХРАНИТСЯ В МЛАДШЕМ БАЙТЕ $SCRT
;------------------------------------------------------------------
$$SCALE:
	PUSH	<R1,R2,R3>	; ОСВОБОДИТЬ R1,R2,R3 DЛЯ УМНОЖЕНИЯ
	MOV	#8.,R2		; ЧИСЛО РАЗРЯДОВ-ЧИСЛО СЛОЖЕНИЙ
	CLR	R1		; НАКОПИТЕЛЬ ПРОИЗВЕДЕНИЯ
	MOVB	$SCRT,R3	; МНОЖИТЕЛЬ
1$:	ROR	R3		; РАЗРЯД МНОЖИТЕЛЯ В БИТ С
	BCC	2$		; НОЛЬ
	ADD	R0,R1		; ЕДИНИЦА--СЛОЖЕНИЕ
2$:	CMP	R2,#7		; ДЛЯ РАЗРЯДОВ 0 И 1
	BLT	3$
	ASR	R1		; СДВИГ ПРОИЗВЕДЕНИЯ (ДЕЛЕНИЕ НА 4)
	BR	4$
3$:	ASL	R0		; ДЛЯ ОСТАЛЬНЫХ-СДВИГ МНОЖИТЕЛЯ
4$:
	SOB	R2,1$		; ВСЕ РАЗРЯДЫ ?
	MOV	R1,R0		; РЕЗУЛЬТАТ -В R0
	POP	<R3,R2,R1>	; ВОССТАНОВИТЬ R1 И R2
	RETURN
;-------------------------------------------------------------------
;		ПРОГРАММА $$SENSE ВОЗВРАЩАЕТ В R0 ЗНАЧЕНИЕ КОНСТАНТЫ
;		ИЛИ ПЕРЕМЕННОЙ (КОНСТРУКЦИИ =<ИМЯ> )
;-------------------------------------------------------------------
$$SENSE:
	CALL	BLNC		; ПРОПУСК ПРОБЕЛОВ
	BNE	1$
	INC	R3		; ПРОПУСК ";"
6$:	RETURN
1$:	CMP	R3,R5
	BHI	6$
.IFT
	CMPB	#'=,(R3)	; КОНСТРУКЦИЯ =<ИМЯ>
	BNE	2$		; НЕТ-КОНСТАНТА
	INC	R3		; ПРОПУСК "="
	CALL	BLNC		; ПРОПУСК ПРОБЕЛОВ
	CALL	$VALUE		; ЧТЕНИЕ ЗНАЧЕНИЯ В СТЕК
	CALL	BLNC		; ПРОПУСК ПРОБЕЛОВ
	BEQ	3$		; ОГРАНИЧИТЕЛЬ- ";" ? ДА
	JMP	ERROR		; ОШИБКА
2$:
.IFT
	CMPB	#'9,(R3)	; ЦИФРА ?
	BLO	5$
	CMPB	#'0,(R3)
	BHI	5$
	CALL	$CONST		; ЧТЕНИЕ КОНСТАНТЫ
	TRAP	112		; ПРОПУСК ПРОБЕЛОВ
	CMPB	@R3,#';
	BNE	4$		; НЕТ ";"
3$:	INC	R3		; ПРОПУСК ";"
4$:
	POP	R0
;
5$:	RETURN
;
.IFF
;-------------------------------;ВХОД:	2(SP) АДРЕС СТРОКИ
;	ОПЕРАТОР DRAW		;	 (SP) ДЛИНА
;-------------------------------;
$DRAW::	MOV	(SP)+,R1	;R3	-УКАЗ. В СТР.
	MOV	@SP,R3		;R5	-АДР. КОНЦА СТР.
	MOV	R5,@SP		;$SCRT:	0-6	-ПОВОР.
	MOV	@#214,-(SP)	;	20	-ВОЗВР.
	MOV	R4,SAVJMP
	MOV	R3,R5
	ADD	R1,R5		;	100	-ОТН. КООРД.
	EMT	26		;	200	-ОТРИЦ.
	MOV	R1,-(SP)	;$SCRT+1:	-МНОЖ. (=4)
	MOV	R2,-(SP)
	CLR	-(SP)
	MOV	#225,R0
	EMT	16
	INC	R0
	EMT	16
	MOV	$DRVX,R1
	MOV	$DRVY,R2
	EMT	24
	BR	AG1
;
OUT:	TST	(SP)+		;ВЫХОД
	EMT	26
	MOV	R1,$DRVX
	MOV	R2,$DRVY
	MOV	#225,R0
	EMT	16
	MOV	(SP)+,R2
	MOV	(SP)+,R1
	EMT	24
	MOV	(SP)+,@#214
	MOV	(SP)+,R5
	CLR	SAVJMP
	JMP	@(R4)+
;
NEXT:	TST	@SP		;ВОЗВРАТ ИЗ ПОДСТРОКИ
	BEQ	OUT
	MOV	(SP)+,R3
	MOV	(SP)+,R5
	CMPB	@R3,#';
	BNE	ERROR
	BR	AGAIN
;
S$:	CALL	REIKS		;МНОЖИТЕЛЬ
	MOVB	R0,@#$SCRT+1
	BR	AGAIN
;
X$:	MOV	R5,-(SP)	;ПОДСТРОКА
	CALL	$STRNG
	MOV	(SP)+,R5
	MOV	(SP),R1
	MOV	R3,@SP
	MOV	R1,R3
	ADD	R3,R5
	BR	AG1
;
A1$:	INC	R3		;ВЫБОР
	SUB	#KEY+10,R0
	BLO	RD1$
	ASL	R0
	JMP	@CASE(R0)
;
A$:	CALL	REIKS		;ПОВОРОТ
	ASL	R0
	BIC	#177770,R0
	BIC	#7,@#$SCRT
	BIS	R0,@#$SCRT
;
AGAIN:	TRAP	112		;СЛЕДУЮЩАЯ КОМАНДА
	CMPB	@R3,#';
	BNE	AG2
	INC	R3
AG1:	TRAP	112
AG2:	MOV	#KEY,R0
	CMP	R3,R5
	BHIS	NEXT
1$:	CMPB	@R0,@R3
	BEQ	A1$
	TSTB	(R0)+
	BNE	1$
ERROR:	MOV	#225,R0		;ОШИБКА
	EMT	16
1$:	TST	(SP)+
	BNE	1$
	MOV	(SP)+,R2
	MOV	(SP)+,R1
	EMT	24
	MOV	(SP),@#214
	TRAP	5
;
RD1$:	ADD	#10,R0		;RFDGLHUE
	CALL	SGNTST
	MOV	R0,-(SP)
	CALL	REIKS
	CLR	R1
	BISB	@#$SCRT+1,R1
	MOV	R0,R2
	MOV	R5,R0
	CALL	DAUG
	MOV	R0,R5
	ASR	R1
	ASR	R1
	SWAB	R1
;
	ADD	@#$SCRT,@SP
	TSTB	@#$SCRT
	BPL	RD4$
RD3$:	ADD	#4,@SP
RD4$:	MOV	@SP,R0
	BIC	#177770,R0
	MOVB	COD(R0),R0
	CLRB	R1
	BISB	R0,R1
	MOV	R1,R0
	BITB	#40,@#$SCRT
	BEQ	2$
	MOV	#226,R2
	MOV	R2,R0
	EMT	16
	MOV	R1,R0
	EMT	16
	MOV	R2,R0
2$:	EMT	16
	BIT	#20,@#$SCRT
	BNE	RD2$
	TST	(SP)+
RDRET:	BIC	#370,@#$SCRT
	BR	AGAIN
RD2$:	BICB	#330,@#$SCRT
	BR	RD3$
;
N$:	BIS	#20,@#$SCRT	;ВОЗВРАТ В НАЧАЛО
	BR	AGAIN
;
B$:	BIS	#40,@#$SCRT	;ПОДНЯТОЕ ПЕРО
	BR	AGAIN
;
C$:	CALL	REIKS		;ЦВЕТ
	CMP	R0,#4
	BHI	ERROR
	TST	R0
	BLO	ERROR
	BNE	1$
	MOV	@#212,@#214
	BR	AGAIN
1$:	ADD	#220,R0
	EMT	16
	BR	AGAIN
;
M$:	EMT	26		;M
	MOV	R1,@#$DRVX
	MOV	R2,@#$DRVY
	MOV	R1,-(SP)
	MOV	R2,-(SP)
	CALL	SGNTST
	BIT	#100,@#$SCRT
	BNE	M1$
	CALL	REIKS		;АБС. КООРД.
	MOV	R0,R1
	TRAP	112
	CMPB	(R3)+,#',
ER1$:	BNE	ERROR
	CALL	SGNTST
	CALL	REIKS
	TSTB	@#$SCRT
	BPL	2$
	NEG	R0
2$:	MOV	R0,R2
M6$:	BIT	#40,@#$SCRT
	BEQ	3$
	MOV	R1,@#$DRVX
	MOV	R2,@#$DRVY
	BR	4$
3$:	MOV	PC,R0
	EMT	32
4$:	BIT	#20,@#$SCRT
	BEQ	5$
	MOV	(SP)+,@#$DRVY
	MOV	(SP)+,@#$DRVX
	BR	RDRET
5$:	CMP	(SP)+,(SP)+
	EMT	24
	BR	RDRET
;
M1$:	CALL	MRKS	;М ОТНОС. КООРД.
	TRAP	112
	CMPB	(R3)+,#',
	BNE	ER1$
	MOV	R1,-(SP)
	CALL	SGNTST
	CALL	MRKS
	MOV	@#$SCRT,R0
	BIC	#177770,R0
	ADD	R0,PC
	BR	7$
	BR	8$
	BR	9$
	NEG	@SP
	BR	10$
8$:	NEG	R1
	BR	10$
9$:	NEG	R1
	NEG	@SP
7$:	MOV	@SP,R2
	MOV	R1,@SP
	MOV	R2,R1
10$:	MOV	(SP)+,R2
	ADD	@#$DRVX,R1
	ADD	@#$DRVY,R2
	BR	M6$
;
MRKS:	CALL	REIKS
	MOV	R0,R1
	MOV	R5,R0
	CLR	R2
	BISB	@#$SCRT+1,R2
	CALL	DAUG
	MOV	R0,R5
	ASR	R1
	ASR	R1
	TSTB	@#$SCRT
	BPL	1$
	NEG	R0
1$:	RETURN
;
SGNTST:	TRAP	112		;ТЕСТ. ЗНАКА
	CMPB	@R3,#'-
	BNE	1$
	BIS	#300,@#$SCRT
	BR	2$
1$:	CMPB	@R3,#'+
	BNE	3$
	BIS	#100,@#$SCRT
2$:	INC	R3
3$:	RETURN
;
REIKS:	TRAP	112		;ЗНАЧЕНИЕ
	CMPB	@R3,#'=
	BNE	1$
	INC	R3
	TRAP	112
	CALL	$VALUE
;	TRAP	112
	MOV	(SP)+,R0
	BPL	3$
	NEG	R0
	TSTB	@#$SCRT
	BPL	4$
	BIC	#200,@#$SCRT
	BR	3$
1$:	CALL	$CONST
	MOV	(SP)+,R0
	RETURN
4$:	BIS	#200,@#$SCRT
3$:	CMPB	@R3,#';
	BNE	ER1$
	RETURN
;
KEY:	.ASCIZ	/RFDGLHUEMNBCSAX/		;КОМАНДЫ
COD:	.BYTE	31,36,33,37,10,34,32,35		;КОДЫ УПР. СИМВ.
	.EVEN
CASE:	.WORD	M$,N$,B$,C$,S$,A$,X$
;
	.ENDC
	.ENDC
	.END	START
;ВСЕ
